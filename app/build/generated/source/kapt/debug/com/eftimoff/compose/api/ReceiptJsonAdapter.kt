// Code generated by moshi-kotlin-codegen. Do not edit.
package com.eftimoff.compose.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class ReceiptJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Receipt>() {
  private val options: JsonReader.Options = JsonReader.Options.of("readyInMinutes", "id", "title",
      "servings", "image", "summary", "steps")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "readyInMinutes")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val listOfStepAdapter: JsonAdapter<List<Step>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Step::class.java), emptySet(),
      "steps")

  @Volatile
  private var constructorRef: Constructor<Receipt>? = null

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Receipt").append(')') }

  override fun fromJson(reader: JsonReader): Receipt {
    var readyInMinutes: Int? = null
    var id: Int? = null
    var title: String? = null
    var servings: Int? = null
    var image: String? = null
    var summary: String? = null
    var steps: List<Step>? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> readyInMinutes = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("readyInMinutes", "readyInMinutes", reader)
        1 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        2 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        3 -> servings = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("servings",
            "servings", reader)
        4 -> {
          image = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("image", "image",
              reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> summary = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("summary",
            "summary", reader)
        6 -> {
          steps = listOfStepAdapter.fromJson(reader) ?: throw Util.unexpectedNull("steps", "steps",
              reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<Receipt> = this.constructorRef ?:
        Receipt::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, String::class.java, Int::class.javaPrimitiveType,
        String::class.java, String::class.java, List::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        readyInMinutes ?: throw Util.missingProperty("readyInMinutes", "readyInMinutes", reader),
        id ?: throw Util.missingProperty("id", "id", reader),
        title ?: throw Util.missingProperty("title", "title", reader),
        servings ?: throw Util.missingProperty("servings", "servings", reader),
        image,
        summary ?: throw Util.missingProperty("summary", "summary", reader),
        steps,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: Receipt?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("readyInMinutes")
    intAdapter.toJson(writer, value.readyInMinutes)
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("title")
    stringAdapter.toJson(writer, value.title)
    writer.name("servings")
    intAdapter.toJson(writer, value.servings)
    writer.name("image")
    stringAdapter.toJson(writer, value.image)
    writer.name("summary")
    stringAdapter.toJson(writer, value.summary)
    writer.name("steps")
    listOfStepAdapter.toJson(writer, value.steps)
    writer.endObject()
  }
}
